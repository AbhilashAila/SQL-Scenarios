--CREATE TABLE Orders (
-- Order_id int,
--    Cust_id VARCHAR(10),
--    Order_dt DATETIME,
--    Order_amt DECIMAL(10,2)
--);

---- Insert sample data
--INSERT INTO Orders 
--VALUES
--(1,'C1', '2025-01-01 09:15:00', 200.00),
--(2,'C1', '2025-01-01 16:45:00', 150.00),
--(3,'C2', '2025-01-01 10:20:00', 300.00),
--(4,'C3', '2025-01-02 11:10:00', 250.00),
--(5,'C1', '2025-01-02 13:00:00', 100.00),
--(6,'C1', '2025-01-03 09:30:00', 180.00),
--(7,'C2', '2025-01-03 15:50:00', 220.00);

--Q.1

--With First_Orders as
--(
--Select 
--distinct Cust_id,
--CAST(Order_dt as Date) as Order_Date,
--Min(Cast(Order_dt as Date)) Over(Partition by Cust_id Order by CAST(Order_dt as Date) ) as First_Order_Date
--from orders
--)
--Select 
--Order_Date,
--Sum(Case 
--         When Order_Date = First_Order_Date then 1 else 0
--		 end) as New_Cust,
--Sum(Case When Order_Date > First_Order_Date then 1 else 0
--          end) as Repeat_Cust
--from First_Orders
--Group by Order_Date

------------------------------------------------------------------------------------------------------------------------------------------

--CREATE TABLE Sales_report (
--    OrderID INT PRIMARY KEY,
--    OrderDate DATE,
--    Category VARCHAR(50),
--    Revenue DECIMAL(10,2)
--);

--INSERT INTO Sales_report (OrderID, OrderDate, Category, Revenue) VALUES
--(1, '2024-03-01', 'Electronics', 500.00),
--(2, '2024-03-02', 'Clothing', 700.00),
--(3, '2024-03-03', 'Electronics', 750.00),
--(4, '2024-03-04', 'Clothing', 650.00),
--(5, '2024-03-05', 'Electronics', 700.00),
--(6, '2024-03-06', 'Clothing', 1300.00),
--(7, '2024-03-07', 'Electronics', 750.00);

-- Q.2 Find Running Total Of Revenue For Each Day

--Select 
--OrderID,
--OrderDate,
--Category,
--Revenue,
--SUM(Revenue) Over(Order by OrderDate) as Running_Total
--from Sales_report

--------------------------------------------------------------------------------------------------------
--create table events (
--    event VARCHAR(50),
--    event_dt DATE
--);
--insert into events (event, event_dt) VALUES
--('fail', '2020-01-04'),
--('success', '2020-01-01'),
--('success', '2020-01-03'),
--('success', '2020-01-06'),
--('fail', '2020-01-05'),
--('success', '2020-01-02');


--Q.3 Write a query to produce the start and end date for each consecutive run of the same event.
--    Consecutive means the same event occurs in sequential rows ordered by date.
--    If a run contains only one row, set start_date = end_date.

--With Consective_days as
--(
--Select 
--event,
--event_dt,
--Dateadd(Day,-ROW_NUMBER() Over(Partition by event Order by event_dt) ,event_dt) as Dates
--from events
--)
--Select 
--event,
--MIN(event_dt) as Start_date,
--MAX(event_dt) as End_date
--from Consective_days
--Group By event,Dates

-----------------------------------------------------------------------------------------------------------------------------------------
--create table occupations (
--    Name VARCHAR(50),
--    Occupation VARCHAR(20)
--);
--insert into occupations (Name, Occupation) values
--('Jenny', 'Doctor'),
--('Samantha', 'Doctor'),
--('Ashley', 'Professor'),
--('Christeen', 'Professor'),
--('Ketty', 'Professor'),
--('Meera', 'Singer'),
--('Priya', 'Singer'),
--('Jane', 'Actor'),
--('Julia', 'Actor'),
--('Maria', 'Actor');


4.Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically.
--The output should consist of four columns (Doctor, Professor, Singer, and Actor)
--in that specific order, with their respective names listed alphabetically under each column.
--Note: Print NULL when there are no more names corresponding to an occupation.

--With cte as
--(
--Select 
--Occupation,
--Name,
--ROW_NUMBER() Over(Partition by Occupation Order by Name) as Id
--from occupations
--)
--Select 
--Max(Case 
--         when Occupation = 'Doctor' then Name 
--		 end) as Doctor,
--Max(Case 
--         when Occupation = 'Professor' then Name 
--		 end) as Professor,
--Max(Case 
--         when Occupation = 'Singer' then Name 
--		 end) as Singer,
--Max(Case 
--         when Occupation = 'Actor' then Name 
--		 end) as Actor
--from cte
--Group by id


--------------------------------------------------------------------------------------------------------------------------------------
--CREATE TABLE Purchase_tbl (
--    Customer_Id INT,
--    Category VARCHAR(50)
--);

--INSERT INTO Purchase_tbl (Customer_Id, Category) VALUES
--(101, 'Electronics'),
--(101, 'Clothing'),
--(101, 'Groceries'),
--(102, 'Electronics'),
--(102, 'Clothing'),
--(103, 'Groceries'),
--(103, 'Clothing'),
--(104, 'Electronics'),
--(104, 'Clothing'),
--(104, 'Groceries');



--find customers who made purchases in every category available.

--Select 
--Customer_Id
--from Purchase_tbl
--Group by Customer_Id
--Having COUNT(distinct Category) in (select count(distinct category)  from Purchase_tbl)



